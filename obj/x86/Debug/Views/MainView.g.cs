#pragma checksum "C:\Users\rlmar\source\repos\TinkerTank\BurthaRemote\Views\MainView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "5B069392B26B973E76912E5CBBF849E34A4D898050688BF59A61C86B8929D57E"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BurthaRemote.Views
{
    partial class MainView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainView_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainView_Bindings
        {
            private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Documents.Run obj11;
            private global::Windows.UI.Xaml.Documents.Run obj12;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj11TextDisabled = false;
            private static bool isobj12TextDisabled = false;

            private MainView_obj10_BindingsTracking bindingsTracking;

            public MainView_obj10_Bindings()
            {
                this.bindingsTracking = new MainView_obj10_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 91 && columnNumber == 34)
                {
                    isobj11TextDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 34)
                {
                    isobj12TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // Views\MainView.xaml line 89
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 11: // Views\MainView.xaml line 91
                        this.obj11 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 12: // Views\MainView.xaml line 93
                        this.obj12 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_UUID(obj.UUID, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 91
                    if (!isobj11TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj11, obj, null);
                    }
                }
            }
            private void Update_UUID(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 93
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj12, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainView_obj10_BindingsTracking
            {
                private global::System.WeakReference<MainView_obj10_Bindings> weakRefToBindingObj; 

                public MainView_obj10_BindingsTracking(MainView_obj10_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainView_obj10_Bindings>(obj);
                }

                public MainView_obj10_Bindings TryGetBindingObject()
                {
                    MainView_obj10_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_UUID(obj.UUID, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UUID":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UUID(obj.UUID, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj)
                {
                    MainView_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainView_obj14_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainView_Bindings
        {
            private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj14;
            private global::Windows.UI.Xaml.Documents.Run obj15;
            private global::System.String obj15TextDeferredValue;
            private global::Windows.UI.Xaml.Documents.Run obj16;
            private global::System.String obj16TextDeferredValue;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj15TextDisabled = false;
            private static bool isobj16TextDisabled = false;

            private MainView_obj14_BindingsTracking bindingsTracking;

            public MainView_obj14_Bindings()
            {
                this.bindingsTracking = new MainView_obj14_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 72 && columnNumber == 34)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 74 && columnNumber == 34)
                {
                    isobj16TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 14: // Views\MainView.xaml line 70
                        this.obj14 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 15: // Views\MainView.xaml line 72
                        this.obj15 = (global::Windows.UI.Xaml.Documents.Run)target;
                        // Views\MainView.xaml line 72
                        if (!isobj15TextDisabled)
                        {
                            if (this.obj15 != null)
                            {
                                XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, this.obj15TextDeferredValue, null);
                            }
                        }
                        break;
                    case 16: // Views\MainView.xaml line 74
                        this.obj16 = (global::Windows.UI.Xaml.Documents.Run)target;
                        // Views\MainView.xaml line 74
                        if (!isobj16TextDisabled)
                        {
                            if (this.obj16 != null)
                            {
                                XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj16, this.obj16TextDeferredValue, null);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj14.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                switch (connectionId)
                {
                    case 14: // Views\MainView.xaml line 70
                    {
                        if (this.obj14 != null)
                        {
                            this.obj14 = null;
                        }
                        this.DisconnectUnloadedObject(15);
                        this.DisconnectUnloadedObject(16);
                        break;
                    }
                    case 15: // Views\MainView.xaml line 72
                    {
                        if (this.obj15 != null)
                        {
                            this.obj15TextDeferredValue = this.obj15.Text;
                            this.obj15 = null;
                        }
                        break;
                    }
                    case 16: // Views\MainView.xaml line 74
                    {
                        if (this.obj16 != null)
                        {
                            this.obj16TextDeferredValue = this.obj16.Text;
                            this.obj16 = null;
                        }
                        break;
                    }
                    default:
                    {
                        throw new global::System.ArgumentException("Invalid connectionId.");
                    }
                }
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_UUID(obj.UUID, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 72
                    if (!isobj15TextDisabled)
                    {
                        if (this.obj15 != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, obj, null);
                        }
                        else
                        {
                            this.obj15TextDeferredValue = obj;
                        }
                    }
                }
            }
            private void Update_UUID(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 74
                    if (!isobj16TextDisabled)
                    {
                        if (this.obj16 != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj16, obj, null);
                        }
                        else
                        {
                            this.obj16TextDeferredValue = obj;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainView_obj14_BindingsTracking
            {
                private global::System.WeakReference<MainView_obj14_Bindings> weakRefToBindingObj; 

                public MainView_obj14_BindingsTracking(MainView_obj14_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainView_obj14_Bindings>(obj);
                }

                public MainView_obj14_Bindings TryGetBindingObject()
                {
                    MainView_obj14_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj14_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_UUID(obj.UUID, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UUID":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UUID(obj.UUID, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj)
                {
                    MainView_obj14_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainView_obj18_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainView_Bindings
        {
            private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj18;
            private global::Windows.UI.Xaml.Controls.TextBlock obj20;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj20TextDisabled = false;

            private MainView_obj18_BindingsTracking bindingsTracking;

            public MainView_obj18_Bindings()
            {
                this.bindingsTracking = new MainView_obj18_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 54 && columnNumber == 29)
                {
                    isobj20TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 18: // Views\MainView.xaml line 37
                        this.obj18 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 20: // Views\MainView.xaml line 51
                        this.obj20 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj18.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 51
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainView_obj18_BindingsTracking
            {
                private global::System.WeakReference<MainView_obj18_Bindings> weakRefToBindingObj; 

                public MainView_obj18_BindingsTracking(MainView_obj18_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainView_obj18_Bindings>(obj);
                }

                public MainView_obj18_Bindings TryGetBindingObject()
                {
                    MainView_obj18_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj18_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj)
                {
                    MainView_obj18_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainView_Bindings
        {
            private global::BurthaRemote.Views.MainView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ListView obj3;
            private global::Windows.UI.Xaml.Controls.ListView obj4;
            private global::System.Boolean obj4LoadDeferredValue;
            private global::System.Object obj4ItemsSourceDeferredValue;
            private global::System.Object obj4SelectedItemDeferredValue;
            private global::Windows.UI.Xaml.Controls.ListView obj5;
            private global::Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer obj6;
            private global::System.Boolean obj6LoadDeferredValue;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3ItemsSourceDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj4LoadDisabled = false;
            private static bool isobj4ItemsSourceDisabled = false;
            private static bool isobj4SelectedItemDisabled = false;
            private static bool isobj5ItemsSourceDisabled = false;
            private static bool isobj5SelectedItemDisabled = false;
            private static bool isobj6LoadDisabled = false;
            private global::System.Collections.Generic.Queue<global::System.Int32> UnloadedElementsToUpdate = new global::System.Collections.Generic.Queue<global::System.Int32>();

            private MainView_obj1_BindingsTracking bindingsTracking;

            public MainView_obj1_Bindings()
            {
                this.bindingsTracking = new MainView_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 33 && columnNumber == 13)
                {
                    isobj3ItemsSourceDisabled = true;
                }
                else if (lineNumber == 34 && columnNumber == 19)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 13)
                {
                    isobj4LoadDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 13)
                {
                    isobj4ItemsSourceDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 13)
                {
                    isobj4SelectedItemDisabled = true;
                }
                else if (lineNumber == 85 && columnNumber == 13)
                {
                    isobj5ItemsSourceDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 19)
                {
                    isobj5SelectedItemDisabled = true;
                }
                else if (lineNumber == 119 && columnNumber == 13)
                {
                    isobj6LoadDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // Views\MainView.xaml line 30
                        this.obj3 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Views\MainView.xaml line 60
                        this.obj4 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        // Views\MainView.xaml line 60
                        if (!isobj4ItemsSourceDisabled)
                        {
                            if (this.obj4 != null)
                            {
                                XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj4, this.obj4ItemsSourceDeferredValue, null);
                            }
                        }
                        // Views\MainView.xaml line 60
                        if (!isobj4SelectedItemDisabled)
                        {
                            if (this.obj4 != null)
                            {
                                XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj4, this.obj4SelectedItemDeferredValue, null);
                            }
                        }
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Views\MainView.xaml line 81
                        this.obj5 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // Views\MainView.xaml line 117
                        this.obj6 = (global::Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                switch (connectionId)
                {
                    case 4: // Views\MainView.xaml line 60
                    {
                        if (this.obj4 != null)
                        {
                            this.obj4ItemsSourceDeferredValue = this.obj4.ItemsSource;
                            this.obj4SelectedItemDeferredValue = this.obj4.SelectedItem;
                            this.obj4 = null;
                        }
                        break;
                    }
                    case 6: // Views\MainView.xaml line 117
                    {
                        if (this.obj6 != null)
                        {
                            this.obj6 = null;
                        }
                        break;
                    }
                    default:
                    {
                        throw new global::System.ArgumentException("Invalid connectionId.");
                    }
                }
            }

            private void UpdateUnloadedElement(int connectionId)
            {
                switch (connectionId)
                {
                    case 4: // Views\MainView.xaml line 60
                    {
                        // Views\MainView.xaml line 60
                        if (!isobj4LoadDisabled)
                        {
                            if (this.obj4LoadDeferredValue)
                            {
                                dataRoot.FindName("servicesList");
                            }
                            else
                            {
                                dataRoot.UnloadObject(this.obj4);
                            }
                        }
                        break;
                    }
                    case 6: // Views\MainView.xaml line 117
                    {
                        // Views\MainView.xaml line 117
                        if (!isobj6LoadDisabled)
                        {
                            if (this.obj6LoadDeferredValue)
                            {
                                dataRoot.FindName("mainThinkingLottieLoadingAnimation");
                            }
                            else
                            {
                                dataRoot.UnloadObject(this.obj6);
                            }
                        }
                        break;
                    }
                    default:
                    {
                        throw new global::System.ArgumentException("Invalid connectionId.");
                    }
                }
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BurthaRemote.Views.MainView)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            private bool TryGet_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(out global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> val)
            {
                global::Microsoft.Toolkit.Uwp.Connectivity.BluetoothLEHelper obj;
                if (TryGet_mainViewModel_bluetoothLEHelper(out obj) && obj != null)
                {
                    val = obj.BluetoothLeDevices;
                    return true;
                }
                else
                {
                    val = default(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice>);
                    return false;
                }
            }

            private bool TryGet_mainViewModel_bluetoothLEHelper(out global::Microsoft.Toolkit.Uwp.Connectivity.BluetoothLEHelper val)
            {
                global::BurthaRemote.ViewModels.MainViewModel obj;
                if (TryGet_mainViewModel(out obj) && obj != null)
                {
                    val = obj.bluetoothLEHelper;
                    return true;
                }
                else
                {
                    val = default(global::Microsoft.Toolkit.Uwp.Connectivity.BluetoothLEHelper);
                    return false;
                }
            }

            private bool TryGet_mainViewModel(out global::BurthaRemote.ViewModels.MainViewModel val)
            {
                global::BurthaRemote.Views.MainView obj;
                if (TryGet_(out obj) && obj != null)
                {
                    val = obj.mainViewModel;
                    return true;
                }
                else
                {
                    val = default(global::BurthaRemote.ViewModels.MainViewModel);
                    return false;
                }
            }

            private bool TryGet_(out global::BurthaRemote.Views.MainView val)
            {
                val = this.dataRoot;
                return true;
            }

            private delegate void InvokeFunctionDelegate(int phase);
            private global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate> PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();

            private void Invoke_mainViewModel_M_CountGreaterThanZero_1268565499(int phase)
            {
                global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> p0;
                if (!TryGet_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(out p0)) { return; }
                global::System.Boolean result = this.dataRoot.mainViewModel.CountGreaterThanZero(p0);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 60
                    if (!isobj4LoadDisabled)
                    {
                        this.obj4LoadDeferredValue = result;
        
                        if (result)
                        {
                            dataRoot.FindName("servicesList");
                        }
                        else
                        {
                            dataRoot.UnloadObject(this.obj4);
                        }
                    }
                }
            }

            private void CompleteUpdate(int phase)
            {
                var functions = this.PendingFunctionBindings;
                this.PendingFunctionBindings = new global::System.Collections.Generic.Dictionary<string, InvokeFunctionDelegate>();
                foreach (var function in functions.Values)
                {
                    function.Invoke(phase);
                }
                while (this.UnloadedElementsToUpdate.Count > 0)
                {
                    this.UpdateUnloadedElement(this.UnloadedElementsToUpdate.Dequeue());
                }
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BurthaRemote.Views.MainView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_mainViewModel(obj.mainViewModel, phase);
                    }
                }
                this.CompleteUpdate(phase);
            }
            private void Update_mainViewModel(global::BurthaRemote.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_mainViewModel_bluetoothLEHelper(obj.bluetoothLEHelper, phase);
                        this.Update_mainViewModel_CurrentDevice(obj.CurrentDevice, phase);
                        this.Update_mainViewModel_M_CountGreaterThanZero_1268565499(phase);
                        this.Update_mainViewModel_CurrentService(obj.CurrentService, phase);
                        this.Update_mainViewModel_CurrentCharacteristic(obj.CurrentCharacteristic, phase);
                        this.Update_mainViewModel_Thinking(obj.Thinking, phase);
                    }
                }
            }
            private void Update_mainViewModel_bluetoothLEHelper(global::Microsoft.Toolkit.Uwp.Connectivity.BluetoothLEHelper obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(obj.BluetoothLeDevices, phase);
                    }
                }
            }
            private void Update_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(obj);
                if (obj != null)
                {
                    this.Update_mainViewModel_M_CountGreaterThanZero_1268565499(phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 30
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj3, obj, null);
                    }
                }
            }
            private void Update_mainViewModel_CurrentDevice(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_CurrentDevice(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_mainViewModel_CurrentDevice_Services(obj.Services, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 30
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj3, obj, null);
                    }
                }
            }
            private void Update_mainViewModel_M_CountGreaterThanZero_1268565499(int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (!isobj4LoadDisabled)
                    {
                        this.PendingFunctionBindings["mainViewModel_M_CountGreaterThanZero_1268565499"] = new InvokeFunctionDelegate(this.Invoke_mainViewModel_M_CountGreaterThanZero_1268565499); 
                    }
                }
            }
            private void Update_mainViewModel_CurrentDevice_Services(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_CurrentDevice_Services(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 60
                    if (!isobj4ItemsSourceDisabled)
                    {
                        if (this.obj4 != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj4, obj, null);
                        }
                        else
                        {
                            this.obj4ItemsSourceDeferredValue = obj;
                        }
                    }
                }
            }
            private void Update_mainViewModel_CurrentService(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_CurrentService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_mainViewModel_CurrentService_Characteristics(obj.Characteristics, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 60
                    if (!isobj4SelectedItemDisabled)
                    {
                        if (this.obj4 != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj4, obj, null);
                        }
                        else
                        {
                            this.obj4SelectedItemDeferredValue = obj;
                        }
                    }
                }
            }
            private void Update_mainViewModel_CurrentService_Characteristics(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_CurrentService_Characteristics(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 81
                    if (!isobj5ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj5, obj, null);
                    }
                }
            }
            private void Update_mainViewModel_CurrentCharacteristic(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_mainViewModel_CurrentCharacteristic(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 81
                    if (!isobj5SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj5, obj, null);
                    }
                }
            }
            private void Update_mainViewModel_Thinking(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MainView.xaml line 117
                    if (!isobj6LoadDisabled)
                    {
                        this.obj6LoadDeferredValue = obj;
        
                        if (obj)
                        {
                            dataRoot.FindName("mainThinkingLottieLoadingAnimation");
                        }
                        else
                        {
                            dataRoot.UnloadObject(this.obj6);
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.mainViewModel != null)
                        {
                            this.dataRoot.mainViewModel.CurrentDevice = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice)this.obj3.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.mainViewModel != null)
                        {
                            this.dataRoot.mainViewModel.CurrentService = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService)this.obj4.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.mainViewModel != null)
                        {
                            this.dataRoot.mainViewModel.CurrentCharacteristic = (global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics)this.obj5.SelectedItem;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainView_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainView_obj1_Bindings> weakRefToBindingObj; 

                public MainView_obj1_BindingsTracking(MainView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainView_obj1_Bindings>(obj);
                }

                public MainView_obj1_Bindings TryGetBindingObject()
                {
                    MainView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_mainViewModel(null);
                    UpdateChildListeners_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(null);
                    UpdateChildListeners_mainViewModel_CurrentDevice(null);
                    UpdateChildListeners_mainViewModel_CurrentDevice_Services(null);
                    UpdateChildListeners_mainViewModel_CurrentService(null);
                    UpdateChildListeners_mainViewModel_CurrentService_Characteristics(null);
                    UpdateChildListeners_mainViewModel_CurrentCharacteristic(null);
                }

                public void PropertyChanged_mainViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BurthaRemote.ViewModels.MainViewModel obj = sender as global::BurthaRemote.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_mainViewModel_bluetoothLEHelper(obj.bluetoothLEHelper, DATA_CHANGED);
                                bindings.Update_mainViewModel_CurrentDevice(obj.CurrentDevice, DATA_CHANGED);
                                bindings.Update_mainViewModel_M_CountGreaterThanZero_1268565499(DATA_CHANGED);
                                bindings.Update_mainViewModel_CurrentService(obj.CurrentService, DATA_CHANGED);
                                bindings.Update_mainViewModel_CurrentCharacteristic(obj.CurrentCharacteristic, DATA_CHANGED);
                                bindings.Update_mainViewModel_Thinking(obj.Thinking, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "bluetoothLEHelper":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_bluetoothLEHelper(obj.bluetoothLEHelper, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentDevice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_CurrentDevice(obj.CurrentDevice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_CurrentService(obj.CurrentService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentCharacteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_CurrentCharacteristic(obj.CurrentCharacteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Thinking":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_Thinking(obj.Thinking, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CountGreaterThanZero":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_M_CountGreaterThanZero_1268565499(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::BurthaRemote.ViewModels.MainViewModel cache_mainViewModel = null;
                public void UpdateChildListeners_mainViewModel(global::BurthaRemote.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_mainViewModel)
                    {
                        if (cache_mainViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel).PropertyChanged -= PropertyChanged_mainViewModel;
                            cache_mainViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_mainViewModel_M_CountGreaterThanZero_1268565499(DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CountGreaterThanZero":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_M_CountGreaterThanZero_1268565499(DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void CollectionChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice>;
                if (obj != null)
                {
                    bindings.Update_mainViewModel_M_CountGreaterThanZero_1268565499(DATA_CHANGED);
                }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices = null;
                public void UpdateChildListeners_mainViewModel_bluetoothLEHelper_BluetoothLeDevices(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice> obj)
                {
                    if (obj != cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices)
                    {
                        if (cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices).PropertyChanged -= PropertyChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices).CollectionChanged -= CollectionChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices;
                            cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_bluetoothLEHelper_BluetoothLeDevices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_mainViewModel_bluetoothLEHelper_BluetoothLeDevices;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_CurrentDevice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_mainViewModel_CurrentDevice_Services(obj.Services, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Services":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_CurrentDevice_Services(obj.Services, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice cache_mainViewModel_CurrentDevice = null;
                public void UpdateChildListeners_mainViewModel_CurrentDevice(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableBluetoothLEDevice obj)
                {
                    if (obj != cache_mainViewModel_CurrentDevice)
                    {
                        if (cache_mainViewModel_CurrentDevice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_CurrentDevice).PropertyChanged -= PropertyChanged_mainViewModel_CurrentDevice;
                            cache_mainViewModel_CurrentDevice = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_CurrentDevice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_CurrentDevice;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_CurrentDevice_Services(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void CollectionChanged_mainViewModel_CurrentDevice_Services(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService>;
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService> cache_mainViewModel_CurrentDevice_Services = null;
                public void UpdateChildListeners_mainViewModel_CurrentDevice_Services(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService> obj)
                {
                    if (obj != cache_mainViewModel_CurrentDevice_Services)
                    {
                        if (cache_mainViewModel_CurrentDevice_Services != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_CurrentDevice_Services).PropertyChanged -= PropertyChanged_mainViewModel_CurrentDevice_Services;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_mainViewModel_CurrentDevice_Services).CollectionChanged -= CollectionChanged_mainViewModel_CurrentDevice_Services;
                            cache_mainViewModel_CurrentDevice_Services = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_CurrentDevice_Services = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_CurrentDevice_Services;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_mainViewModel_CurrentDevice_Services;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_CurrentService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_mainViewModel_CurrentService_Characteristics(obj.Characteristics, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Characteristics":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_mainViewModel_CurrentService_Characteristics(obj.Characteristics, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService cache_mainViewModel_CurrentService = null;
                public void UpdateChildListeners_mainViewModel_CurrentService(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattDeviceService obj)
                {
                    if (obj != cache_mainViewModel_CurrentService)
                    {
                        if (cache_mainViewModel_CurrentService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_CurrentService).PropertyChanged -= PropertyChanged_mainViewModel_CurrentService;
                            cache_mainViewModel_CurrentService = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_CurrentService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_CurrentService;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_CurrentService_Characteristics(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                public void CollectionChanged_mainViewModel_CurrentService_Characteristics(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics>;
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics> cache_mainViewModel_CurrentService_Characteristics = null;
                public void UpdateChildListeners_mainViewModel_CurrentService_Characteristics(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics> obj)
                {
                    if (obj != cache_mainViewModel_CurrentService_Characteristics)
                    {
                        if (cache_mainViewModel_CurrentService_Characteristics != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_CurrentService_Characteristics).PropertyChanged -= PropertyChanged_mainViewModel_CurrentService_Characteristics;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_mainViewModel_CurrentService_Characteristics).CollectionChanged -= CollectionChanged_mainViewModel_CurrentService_Characteristics;
                            cache_mainViewModel_CurrentService_Characteristics = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_CurrentService_Characteristics = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_CurrentService_Characteristics;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_mainViewModel_CurrentService_Characteristics;
                        }
                    }
                }
                public void PropertyChanged_mainViewModel_CurrentCharacteristic(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj = sender as global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                        bindings.CompleteUpdate(DATA_CHANGED);
                    }
                }
                private global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics cache_mainViewModel_CurrentCharacteristic = null;
                public void UpdateChildListeners_mainViewModel_CurrentCharacteristic(global::Microsoft.Toolkit.Uwp.Connectivity.ObservableGattCharacteristics obj)
                {
                    if (obj != cache_mainViewModel_CurrentCharacteristic)
                    {
                        if (cache_mainViewModel_CurrentCharacteristic != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_mainViewModel_CurrentCharacteristic).PropertyChanged -= PropertyChanged_mainViewModel_CurrentCharacteristic;
                            cache_mainViewModel_CurrentCharacteristic = null;
                        }
                        if (obj != null)
                        {
                            cache_mainViewModel_CurrentCharacteristic = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_mainViewModel_CurrentCharacteristic;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Windows.UI.Xaml.Controls.ListView sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\MainView.xaml line 24
                {
                    this.scanForBluetoothButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.scanForBluetoothButton).Click += this.scanForBluetoothButton_Click;
                }
                break;
            case 4: // Views\MainView.xaml line 60
                {
                    this.servicesList = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 5: // Views\MainView.xaml line 81
                {
                    this.characteristicsList = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 6: // Views\MainView.xaml line 117
                {
                    this.mainThinkingLottieLoadingAnimation = (global::Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer)(target);
                }
                break;
            case 7: // Views\MainView.xaml line 106
                {
                    global::Windows.UI.Xaml.Controls.Button element7 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element7).Click += this.Button_Click;
                }
                break;
            case 8: // Views\MainView.xaml line 111
                {
                    this.messageTextBox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 19: // Views\MainView.xaml line 42
                {
                    global::Windows.UI.Xaml.Controls.Button element19 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)element19).Click += this.connectToDeviceButton_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// UnloadObject(DependencyObject)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        partial void UnloadObject(global::Windows.UI.Xaml.DependencyObject unloadableObject)
        {
            if (unloadableObject != null)
            {
                // Views\MainView.xaml line 60
                if (unloadableObject == this.servicesList)
                { 
                    this.DisconnectUnloadedObject(4);
                }
                // Views\MainView.xaml line 117
                if (unloadableObject == this.mainThinkingLottieLoadingAnimation)
                { 
                    this.DisconnectUnloadedObject(6);
                }
                global::Windows.UI.Xaml.Markup.XamlMarkupHelper.UnloadObject(unloadableObject);
            }
        }

        /// <summary>
        /// DisconnectUnloadedObject(int connectionId)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void DisconnectUnloadedObject(int connectionId)
        {
            switch(connectionId)
            {
                case 4: // Views\MainView.xaml line 60
                {
                    this.Bindings.DisconnectUnloadedObject(4);
                    this.servicesList = null;
                    break;
                }
                case 6: // Views\MainView.xaml line 117
                {
                    this.Bindings.DisconnectUnloadedObject(6);
                    this.mainThinkingLottieLoadingAnimation = null;
                    break;
                }
                default:
                {
                    throw new global::System.ArgumentException("Invalid connectionId.");
                }
            }
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\MainView.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainView_obj1_Bindings bindings = new MainView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 10: // Views\MainView.xaml line 89
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element10 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainView_obj10_Bindings bindings = new MainView_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            case 14: // Views\MainView.xaml line 70
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element14 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainView_obj14_Bindings bindings = new MainView_obj14_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element14.DataContext);
                    element14.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element14, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element14, bindings);
                }
                break;
            case 18: // Views\MainView.xaml line 37
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element18 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainView_obj18_Bindings bindings = new MainView_obj18_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element18.DataContext);
                    element18.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element18, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element18, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

